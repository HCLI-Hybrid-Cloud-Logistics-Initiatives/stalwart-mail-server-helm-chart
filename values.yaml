# Default values for stalwart-mail-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# ✅ Ajout des valeurs manquantes pour les helpers
nameOverride: ""
fullnameOverride: ""

# Global configuration
global:
  # Deployment profile: tiny, small, medium, large
  profile: "small"
  
  # Image registry
  imageRegistry: ""
  
  # Image pull secrets
  imagePullSecrets: []
  
  # Storage class for persistent volumes
  storageClass: ""

# Stalwart Mail Server configuration
stalwart:
  # Image configuration
  image:
    registry: docker.io
    repository: stalwartlabs/mail-server
    tag: "v0.11.8"
    pullPolicy: IfNotPresent
    pullSecrets: []

  # Deployment strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1

  # Replica configuration (profile-dependent)
  replicaCount: 1
  
  # Minimum replicas for HA (used in medium/large profiles)
  minReplicas: 2
  maxReplicas: 10

  # Pod anti-affinity configuration
  podAntiAffinity:
    enabled: true
    # requiredDuringSchedulingIgnoredDuringExecution or preferredDuringSchedulingIgnoredDuringExecution
    type: "requiredDuringSchedulingIgnoredDuringExecution"
    topologyKey: "kubernetes.io/hostname"
    weight: 100

  # Resource requirements (profile-dependent)
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

  # Environment variables
  env: []

  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault

  # Pod security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534
    fsGroup: 65534
    seccompProfile:
      type: RuntimeDefault

  # Liveness probe
  livenessProbe:
    httpGet:
      path: /healthz/live
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  # Readiness probe
  readinessProbe:
    httpGet:
      path: /healthz/ready
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  # Startup probe
  startupProbe:
    httpGet:
      path: /admin
      port: 8080
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1

  # Node selector
  nodeSelector: {}

  # Tolerations
  tolerations: []

  # Affinity
  affinity: {}

  # Priority class
  priorityClassName: ""

  # Termination grace period
  terminationGracePeriodSeconds: 60

  # Pod annotations
  podAnnotations: {}

  # Pod labels
  podLabels: {}

  # ✅ Persistence configuration (moved under stalwart)
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 10Gi
    storageClass: ""
    annotations: {}

  # ✅ Config persistence configuration (moved under stalwart)
  configPersistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 1Gi
    storageClass: ""
    annotations: {}

  # Basic Stalwart configuration
  config:
    jmap:
      maxObjectsInGet: 500
      maxObjectsInSet: 250
      pushEnabled: true
    
    smtp:
      maxMessageSize: 26214400  # 25MB
      maxRecipients: 50
      maxConnections: 25
      maxAuthAttempts: 3
    
    imap:
      maxConnections: 200
      idleTimeout: 1800  # 30 minutes
      maxAuthAttempts: 3
    
    security:
      minTlsVersion: "TLSv1.2"
      preferServerCiphers: true
      authFailDelay: 2  # seconds

# ✅ Storage configuration (for PVC template compatibility)
storage:
  # Storage type: pvc or blob
  type: "pvc"
  
  # PVC configuration
  pvc:
    enabled: true
    # Access modes: ReadWriteOnce (RWO) for single instance, ReadWriteMany (RWX) for HA
    accessMode: "ReadWriteOnce"
    size: "10Gi"
    storageClass: ""
    annotations: {}
    
    # Configuration storage (for WebUI editing)
    config:
      enabled: true
      accessMode: "ReadWriteMany"
      size: "1Gi"
      storageClass: ""
      mountPath: "/opt/stalwart-mail/etc"
  
  # Blob storage configuration (for tiny profile demo)
  blob:
    enabled: false
    type: "filesystem"
    path: "/tmp/stalwart-data"

# Service configuration
service:
  type: LoadBalancer
  
  # External traffic policy
  externalTrafficPolicy: Local
  
  # Load balancer source ranges
  loadBalancerSourceRanges: []
  
  # Annotations
  annotations: {}
  
  # Service ports
  ports:
    # Admin web interface
    webadmin:
      port: 8080
      targetPort: 8080
      protocol: TCP
    webadmin_ssl:
      port: 443
      targetPort: 443
      protocol: TCP
    
    # IMAP ports
    imap:
      port: 143
      targetPort: 143
      protocol: TCP
    imaps:
      port: 993
      targetPort: 993
      protocol: TCP
    
    # POP3 ports
    pop3:
      port: 110
      targetPort: 110
      protocol: TCP
    pop3s:
      port: 995
      targetPort: 995
      protocol: TCP
    
    # SMTP ports
    smtp:
      port: 25
      targetPort: 25
      protocol: TCP
    submission:
      port: 587
      targetPort: 587
      protocol: TCP
    smtps:
      port: 465
      targetPort: 465
      protocol: TCP
    
    # Sieve port
    sieve:
      port: 4190
      targetPort: 4190
      protocol: TCP

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: mail.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Configuration
config:
  # Configuration management type: configmap or pvc
  type: "pvc"
  
  # Hostname for the mail server
  hostname: "mail.example.com"
  
  # Node ID for clustering
  nodeId: 1
  
  # Configuration content (basic template)
  content: |
    [server]
    hostname = "mail.example.com"
    
    [cluster]
    node-id = 1
    
    [store."data"]
    type = "postgresql"
    
    [store."blob"]
    type = "postgresql"
    
    [store."fts"]
    type = "postgresql"
    
    [store."lookup"]
    type = "postgresql"

# PostgreSQL HA configuration (Bitnami chart)
postgresql-ha:
  enabled: false
  
  # PostgreSQL configuration
  postgresql:
    replicaCount: 3
    auth:
      database: stalwart
      username: stalwart
      password: ""
      existingSecret: ""
    
    # Resource requirements
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
  
  # Pgpool configuration
  pgpool:
    replicaCount: 1
    
    # Resource requirements
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
  
  # Persistence
  persistence:
    enabled: true
    size: 20Gi
    storageClass: ""

# Redis configuration (for coordination)
redis:
  enabled: false
  
  # Redis architecture: standalone or replication
  architecture: standalone
  
  # Authentication
  auth:
    enabled: true
    password: ""
    existingSecret: ""
  
  # Master configuration
  master:
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
  
  # Replica configuration (for HA)
  replica:
    replicaCount: 2
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
  
  # Sentinel configuration (for HA)
  sentinel:
    enabled: false
    resources:
      limits:
        cpu: 250m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

# Monitoring configuration
monitoring:
  # Prometheus ServiceMonitor
  serviceMonitor:
    enabled: false
    namespace: ""
    labels: {}
    interval: 30s
    scrapeTimeout: 10s
    path: /metrics
    port: webadmin

  # Grafana dashboard
  grafana:
    enabled: false
    dashboard: true

# Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Network Policies
networkPolicies:
  enabled: false

# RBAC
rbac:
  create: true

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Security configuration
security:
  # Pod Security Standards level: privileged, baseline, restricted
  podSecurityStandards: "restricted"
  
  # Network policies
  networkPolicies:
    enabled: true
    # Default deny all ingress
    denyAll: true
    # Allow ingress from specific namespaces
    allowNamespaces: []
    # Custom network policies
    custom: []

# Backup configuration
backup:
  enabled: false
  
  # Backup schedule (cron format)
  schedule: "0 2 * * *"
  
  # Retention policy
  retention: "7d"
  
  # Storage configuration for backups
  storage:
    type: "s3"
    bucket: ""
    region: ""
    accessKey: ""
    secretKey: ""

# Extra resources to be created
extraResources: []
