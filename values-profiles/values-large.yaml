# Stalwart Mail Server - Large Profile Configuration
# For hosting providers and critical infrastructure (200+ users)
# PostgreSQL HA cluster, Redis HA, 3+ Stalwart instances, HPA

global:
  profile: "large"
  storageClass: "fast-ssd"  # High-performance storage recommended

stalwart:
  # Minimum 3 replicas for HA across zones
  replicaCount: 3
  image:
    repository: stalwartlabs/mail-server
    tag: "v0.11.8"
    pullPolicy: IfNotPresent
  
  # Advanced RollingUpdate strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  
  # Resources based on production workloads
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 2000m
      memory: 4Gi
  
  # Persistence with high-performance storage
  persistence:
    enabled: true
    storageClass: "fast-ssd"
    accessMode: ReadWriteOnce
    size: 50Gi
    annotations:
      backup.velero.io/backup-volumes: "data"
  
  # Config persistence
  configPersistence:
    enabled: true
    storageClass: "fast-ssd"
    accessMode: ReadWriteOnce
    size: 5Gi
    annotations:
      backup.velero.io/backup-volumes: "config"
  
  # Pod anti-affinity (strict requirements)
  podAntiAffinity:
    enabled: true
    type: "requiredDuringSchedulingIgnoredDuringExecution"
    topologyKey: "kubernetes.io/hostname"
  
  # Enhanced security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    seccompProfile:
      type: RuntimeDefault
  
  # Production-grade health checks
  livenessProbe:
    httpGet:
      path: /admin
      port: 8080
    initialDelaySeconds: 90
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
    
  readinessProbe:
    httpGet:
      path: /admin
      port: 8080
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  
  # Startup probe for slow initializations
  startupProbe:
    httpGet:
      path: /admin
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1
  
  # Advanced configuration
  config:
    jmap:
      maxObjectsInGet: 1000
      maxObjectsInSet: 500
      pushEnabled: true
    
    smtp:
      maxMessageSize: 52428800  # 50MB
      maxRecipients: 100
      maxConnections: 50
      maxAuthAttempts: 5
    
    imap:
      maxConnections: 1000
      idleTimeout: 1800  # 30 minutes
      maxAuthAttempts: 5
    
    security:
      minTlsVersion: "TLSv1.2"
      preferServerCiphers: true
      authFailDelay: 3  # seconds

# Service configuration with LoadBalancer
service:
  type: LoadBalancer
  externalTrafficPolicy: Local
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
  ports:
    webadmin:
      port: 8080
      protocol: TCP
      targetPort: 8080
    webadmin_ssl:
      port: 443
      protocol: TCP
      targetPort: 443
    smtp:
      port: 25
      protocol: TCP
      targetPort: 25
    submission:
      port: 587
      protocol: TCP
      targetPort: 587
    smtps:
      port: 465
      protocol: TCP
      targetPort: 465
    imap:
      port: 143
      protocol: TCP
      targetPort: 143
    imaps:
      port: 993
      protocol: TCP
      targetPort: 993
    pop3:
      port: 110
      protocol: TCP
      targetPort: 110
    pop3s:
      port: 995
      protocol: TCP
      targetPort: 995
    sieve:
      port: 4190
      protocol: TCP
      targetPort: 4190


# PostgreSQL HA Configuration (production-grade)
postgresql-ha:
  enabled: true
  
  postgresql:
    replicaCount: 3
    auth:
      enablePostgresUser: true
      postgresPassword: ""  # Auto-generated
      username: stalwart
      password: ""  # Auto-generated
      database: stalwart
      replicationUsername: replicator
      replicationPassword: ""  # Auto-generated
    
    persistence:
      enabled: true
      storageClass: "fast-ssd"
      size: 100Gi
      annotations:
        backup.velero.io/backup-volumes: "data"
    
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 4Gi
    
    # Advanced PostgreSQL configuration
    postgresql:
      maxConnections: "500"
      sharedBuffers: "1GB"
      effectiveCacheSize: "3GB"
      maintenanceWorkMem: "256MB"
      checkpointCompletionTarget: "0.9"
      walBuffers: "16MB"
      defaultStatisticsTarget: "100"
      randomPageCost: "1.1"
      effectiveIoCanurrency: "200"
      workMem: "4MB"
      minWalSize: "1GB"
      maxWalSize: "4GB"
    
    # Security hardening
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 999
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      seccompProfile:
        type: RuntimeDefault
    
    # Pod Anti-Affinity for PostgreSQL
    affinity:
      podAntiAffinity:
        type: hard
        topologyKey: kubernetes.io/hostname
  
  pgpool:
    replicaCount: 2  # HA Pgpool
    adminUsername: admin
    adminPassword: ""  # Auto-generated
    
    resources:
      requests:
        cpu: 500m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1Gi
    
    # Pod Anti-Affinity for Pgpool
    affinity:
      podAntiAffinity:
        type: hard
        topologyKey: kubernetes.io/hostname
    
    # Security hardening
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      seccompProfile:
        type: RuntimeDefault

# Redis HA Configuration
redis:
  enabled: true
  architecture: replication
  auth:
    enabled: true
    password: ""  # Auto-generated
  
  master:
    persistence:
      enabled: true
      storageClass: "fast-ssd"
      size: 10Gi
    
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 1000m
        memory: 2Gi
    
    # Security hardening
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      seccompProfile:
        type: RuntimeDefault
  
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      storageClass: "fast-ssd"
      size: 10Gi
    
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    
    # Security hardening
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      seccompProfile:
        type: RuntimeDefault
  
  # Redis Sentinel for HA
  sentinel:
    enabled: true
    masterSet: "mymaster"
    quorum: 2

# HPA (Horizontal Pod Autoscaler)
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Network Policies
networkPolicies:
  enabled: true

# RBAC
rbac:
  create: true

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 15s
    labels:
      app: stalwart-mail

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: mail.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: stalwart-tls
      hosts:
        - mail.example.com

# Security
podSecurityContext:
  fsGroup: 65534

# Node affinity for performance
nodeAffinity:
  preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      preference:
        matchExpressions:
          - key: node-type
            operator: In
            values:
              - high-performance

# Tolerations for dedicated nodes
tolerations:
  - key: "dedicated"
    operator: "Equal"
    value: "stalwart"
    effect: "NoSchedule"

# Additional environment variables
env:
  - name: STALWART_PROFILE
    value: "large"
  - name: RUST_LOG
    value: "info"
